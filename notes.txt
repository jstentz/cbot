Ideas for the future:
* Use some tool to generate Cmake files to build the project in a much simpler way -- also could hopefully allow for cross-platform
* SFML graphics package for C++
* or just make them purely cmdline and do the graphics in python; then we can just send the data via web stuff (tcp)
* make a way to have versions play each other
* magic bitboards are lit asf, use them
* fix all the bugs that are definitely there with the transposition table
* refactor all of the code into better C++ style
* Maybe its worth making the python side of things a whole different repo -> there might already be a python library to do all of this stuff
* I really need to redo how I do the opening book (it takes so long to load)
* not to mention my config file nonsense is so bad 
* fix the fen string parsing and actually implement the remaining rules of chess lol


General class structure:

Board:
  * making moves 
  * unmaking moves
  * everything to do with the state and history 
  * overwrite object() https://en.cppreference.com/w/cpp/utility/hash/operator()
  * overwrite == operator 
  * look up custom class as key for unordered_map
  * need to include the irreversible state (seperate class, but have it be inside of the board?)
  * I think I want to move a lot of the random constants to constants.h, even if they shouldn't be exposed elsewhere

Piece:
 * should make this similar to the move class, where the underlying representation is just an integer, but 
   it has a bunch of member functions to interact with it
 * need to move the piece constants to be static members of the class (or put them in constants or something) 

Search:
  * takes in a board to search
  * contains lots of functions used to search the board in many ways
  * contains state information about the status of the search

Evaluator:

Move: 
  * contains information encoding a move (not really sure if I should make it not a 32-bit integer... eh the underlying data doesn't matter as much as the interface)
  * functions to turn move into strings
  * sorting moves (this is probably static)

TranspositionTable:

OpeningBook:



Design Ideas:
* I think it makes the most sense to have the look-up table and the opening book be global structures, since otherwise I'd have to pass them around everywhere (still turn them into classes though)
* There might be enough things going on in move generation to make that a class
* Still should make a move class (but the underlying representation will just be a 32 bit integer)
* The move generator and the searcher should just take in Board::Ptr in the constructor, so any changes to that specific board will be seen there and will only need to be initialized once.
* The board doesn't need to see the move generator at all, it just needs to receive a move to make on the board
* all of the attack getting stuff should be a part of the move generator class 
* that means all of the get pinned pieces and stuff has to go too
* I also think the transposition table should be its own class, but probably make it global and const, since there is only one of them
* consider using more std::array instead of pure c arrays


/**
* All main classes
*  Board
*  LookUpTable
*  MoveGenerator
*  Searcher
*  Evaluator
*  OpeningBook
*  TranspositionTable 
*  Hasher
*  
*/

I should really store the opening book as hex values so its more efficient
I have to regenerate the opening book... do this later

It seems as though the hashing might be broken, cuz idk if we are getting
hits on the TT table 

^ make sure its being initialized correctly first in fen decoding

8/8/P7/3B4/2P1p3/2K1k1p1/2P5/3r4 w - - 0 57
this position gives back a null move
seems like the promotion extension is breaking it

1k1r1b1r/pppqpppp/8/3pP3/6b1/2PBP1B1/P1P2PPP/R2Q1RK1 w - - 7 12
hanging my queen in this position?

r1bQ2k1/1q1p1r2/p2Pp3/2p5/P7/R7/1P3PPP/2B2RK1 b - - 0 1
null move here